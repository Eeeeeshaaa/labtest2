import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score
data=load_diabetes()
df=pd.DataFrame(data.data,columns=data.feature_names)
df['diabetes'] = data.target
print(df.info())
print("Missing Values per Column:")
print(df.isnull().sum())
df = df.fillna(df.mean())
print("\nAfter handling missing values:") 
print(df.isnull().sum())
plt.scatter(x=df.[x],y=df.attribute='Blood sugar')
X = df.drop(columns='diabetes')
y = df['diabetes']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.6, random_state=42)

knn=KNeighborsRegressor()
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)

nav = GaussianNB()
nav.fit(X_train, y_train)
y_pred_nav = nav.predict(X_test)

print("KNN Metrics:")
print("Mean Squared Error:", mean_squared_error(y_test, y_pred_knn))
print("Mean Absolute Error:", mean_absolute_error(y_test, y_pred_knn))
print("R2 Score:", r2_score(y_test, y_pred_knn))

print("\nNAV Metrics:")
print("Mean Squared Error:", mean_squared_error(y_test, y_pred_nav))
print("Mean Absolute Error:", mean_absolute_error(y_test, y_pred_nav))
print("R2 Score:", r2_score(y_test, y_pred_nav))
X = df.drop(columns='diabetes')
y = df['diabetes']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.8, random_state=42)

knn=KNeighborsRegressor()
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)

nav = GaussianNB()
nav.fit(X_train, y_train)
y_pred_nav = nav.predict(X_test)

print("KNN Metrics:")
print("Mean Squared Error:", mean_squared_error(y_test, y_pred_knn))
print("Mean Absolute Error:", mean_absolute_error(y_test, y_pred_knn))
print("R2 Score:", r2_score(y_test, y_pred_knn))

print("\nSVM Metrics:")
print("Mean Squared Error:", mean_squared_error(y_test, y_pred_nav))
print("Mean Absolute Error:", mean_absolute_error(y_test, y_pred_nav))
print("R2 Score:", r2_score(y_test, y_pred_nav))

